1st Design Principle:
Identify the aspects of your application that vary and separate them from what stays the same
i.e, take the parts that vary and encapsulate them, so that later you can alter or extend the parts that vary without affecting those that don’t.

2nd Design Principle:
Program to an interface, not an implementation.

3rd Design Principle:
Favor composition over inheritance.

4th Design Principle:
Strive for loosely coupled designs
between objects that interact.

5th Design Principle:
"Open-Closed Principle" - Classes should be open for extension,
                          but closed for modification.

6th Design Principle:
"Dependency Inversion Principle" - Depend upon abstractions. Do not
                                   depend upon concrete classes.
                                   It suggests that our
                                   high-level components should not depend on our low-level
                                   components; rather, they should both depend on abstractions.
                                   It suggests that our
                                   high-level components should not depend on our low-level
                                   components; rather, they should both depend on abstractions.

7th Design Principle:
"Principle of Least Knowledge" aka Law of Demeter - A class should only "talk" to its immediate friends.
                                                    Essentially, it states that the classes should be as
                                                    decoupled from each other as possible.

FAQs:
Q. Where does the "Inversion" in DI Principle come from?

A. The “inversion” in the name Dependency Inversion
   Principle is there because it inverts the way you
   typically might think about your OO design.
   Low-level components now depend on a higher level
   abstraction. Likewise, the high-level component
   is also tied to the same abstraction.

Q. What are some guidelines for following the DI principle?

A. These are the general "guidelines" to keep in mind. Please note that they are not
   strict rules otherwise it would be impossible for us to write even a single java program xD
        a. No variable should hold a reference to a concrete class. (Use a factory instead)
        b. No class should derive from a concrete class. (Use interfaces/abstract classes)
        c. No implemented method in the base abstract class should be overridden by any subclasses.

Q. What are the disadvantages of the Principle of Least Knowledge?

A. Applying this principle results in more “wrapper” classes being written to handle
   method calls to other components. This can result in increased complexity and
   development time as well as decreased runtime performance.