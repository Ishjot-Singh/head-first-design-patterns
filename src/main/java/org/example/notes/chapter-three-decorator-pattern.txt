Implementing the Open to extension and Closed to modification principle helps create
designs that are resilient to change and flexible enough to take on new
functionality to meet changing requirements

Decorator pattern helps us implement the Open-Closed principle

As the Open-Closed principle adds abstraction and complexity to our application
we should only concentrate on implementing it in places that are likely to change.

Decorator Pattern definition:
The Decorator Pattern attaches additional
responsibilities to an object dynamically.
Decorators provide a flexible alternative to
subclassing for extending functionality


The decorators implement/subclass the same interface as the concrete components.
We use inheritance here to achieve the type matching in this pattern as
the decorator is to be used as a stand in for the concrete component,
but we arenâ€™t using inheritance to get behavior.
We add behavior to the decorator using composition, i.e, by having the base component in
the decorators.

Composition helps define behavior at run-time
rather than at compile time as is in the case
of inheritance.

Typically, Decorator pattern is implemented using
other patterns like Factory and Builder.
This is done since with the Decorator pattern we
have to manage more objects and aforementioned patterns
help us with object creation.